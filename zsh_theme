# vim:ft=zsh ts=2 sw=2 sts=2
#
# agnoster's Theme - https://gist.github.com/3712874
# A Powerline-inspired theme for ZSH
#
# # README
#
# In order for this theme to render correctly, you will need a
# [Powerline-patched font](https://github.com/Lokaltog/powerline-fonts).
#
# In addition, I recommend the
# [Solarized theme](https://github.com/altercation/solarized/) and, if you're
# using it on Mac OS X, [iTerm 2](http://www.iterm2.com/) over Terminal.app -
# it has significantly better color fidelity.
#
# # Goals
#
# The aim of this theme is to only show you *relevant* information. Like most
# prompts, it will only show git information when in a git working directory.
# However, it goes a step further: everything from the current user and
# hostname to whether the last call exited with an error to whether background
# jobs are running in this shell will all be displayed automatically when
# appropriate.
#
### Segment drawing
# A few utility functions to make it easy and re-usable to draw segmented prompts

CURRENT_BG='NONE'
CURRENT_RBG='NONE'
SEGMENT_SEPARATOR=''
RSEGMENT_SEPARATOR=''
ALT_SEGMENT_SEPARATOR=''
ALT_RSEGMENT_SEPARATOR=''

#BADWOLF colors
#ZSH_PROMPT_A=(232 154 232 39)
#ZSH_PROMPT_B=(222 238 222 27)
#ZSH_PROMPT_C=(214 238 39 235)
#ZSH_PROMPT_GUTTER=(121 235 121 235)
#ZSH_PROMPT_WARN=(232 166 232 166)

# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' ]]; then
    if [[ $1 != $CURRENT_BG ]]; then
      echo -n "%{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%}"
    else
      echo -n "%{$bg%F{$CURRENT_FG}%}$ALT_SEGMENT_SEPARATOR%{$fg%}"
    fi
  else
    echo -n "%{$bg%}%{$fg%}"
  fi
  CURRENT_BG=$1
  CURRENT_FG=$2
  [[ -n $3 ]] && echo -n $3
}

rprompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $1 != $CURRENT_RBG ]]; then
    echo -n "%{%F{$1}%}$RSEGMENT_SEPARATOR%{$bg$fg%}"
  else
    echo -n "%{$bg$fg%}$ALT_RSEGMENT_SEPARATOR"
  fi
  CURRENT_RBG=$1
  [[ -n $3 ]] && echo -n $3
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n "%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}

rprompt_end(){
  echo -n "%{%f%k%}"
  CURRENT_RBG=''
}


### Prompt components
# Each component will draw itself, and hide itself if no information needs to be shown

# Context: user@hostname (who am I and where am I)
prompt_context() {
  if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then
    echo -n "%B %(!.%{%F{yellow}%}⚡.)%n@%m %b"
  fi
}

# Git: branch/detached head, dirty status
prompt_git() {
  local ref dirty mode repo_path
  repo_path=$(git rev-parse --git-dir 2>/dev/null)

  if $(git rev-parse --is-inside-work-tree >/dev/null 2>&1); then
    dirty=$(parse_git_dirty)
    ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="➦ $(git show-ref --head -s --abbrev |head -n1 2> /dev/null)"

    if [[ -e "${repo_path}/BISECT_LOG" ]]; then
      mode=" <B>"
    elif [[ -e "${repo_path}/MERGE_HEAD" ]]; then
      mode=" >M<"
    elif [[ -e "${repo_path}/rebase" || -e "${repo_path}/rebase-apply" || -e "${repo_path}/rebase-merge" || -e "${repo_path}/../.dotest" ]]; then
      mode=" >R>"
    fi

    setopt promptsubst
    autoload -Uz vcs_info

    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' get-revision true
    zstyle ':vcs_info:*' check-for-changes true
    zstyle ':vcs_info:*' stagedstr '%{%F{yellow}%}•'
    zstyle ':vcs_info:git:*' unstagedstr '%{%F{green}%}•'
    if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null) ]] {
        zstyle ':vcs_info:*' formats ' %u%c'
    } else {
        zstyle ':vcs_info:*' formats ' %{%F{cyan}%}•%u%c'  # unstaged
    }
    zstyle ':vcs_info:*' actionformats ' %u%c'
    vcs_info
    echo -n " ${ref/refs\/heads\// }${vcs_info_msg_0_%% }${mode} "
  fi
}

# Dir: current working directory
prompt_dir() {
    echo -n ' %~ '
}

# Virtualenv: current working virtualenv
prompt_virtualenv() {
  local virtualenv_path="$VIRTUAL_ENV"
  if [[ -n $virtualenv_path && -n $VIRTUAL_ENV_DISABLE_PROMPT ]]; then
    echo -n " `basename $virtualenv_path` "
  fi
}

prompt_jobs() {
  local bgjobs=$(jobs -l | wc -l)
  [[ $bgjobs -gt 0 ]] && echo -n " ⚙ $bgjobs "
}
prompt_retval(){
  [[ $RETVAL -ne 0 ]] && rprompt_segment 166 232 " ✘ %? "
}

## Main prompt
build_prompt() {
  prompt_segment 154 232
  prompt_context
  prompt_segment 238 222
  prompt_git
  prompt_segment 238 214
  prompt_virtualenv
  prompt_segment 235 121
  prompt_dir
  prompt_end
}

build_prompt2() {
  prompt_segment 39 232 ' %_ '
  prompt_end
}

build_rprompt(){
  RETVAL=$?
  rprompt_segment 235 121 ' %D{%F} %* '
  rprompt_segment 238 214
  prompt_jobs
  rprompt_segment 154 232
  prompt_retval
  rprompt_end
}
build_rprompt2() {
  rprompt_segment 39 232 ' ↲ '
  rprompt_end
}

export VIRTUAL_ENV_DISABLE_PROMPT=1
PS1='%{%f%b%k%}$(build_prompt) '
PS2='%{%f%b%k%}$(build_prompt2) '
RPS1=' %{%f%b%k%}$(build_rprompt)'
RPS2=' %{%f%b%k%}$(build_rprompt2)'
