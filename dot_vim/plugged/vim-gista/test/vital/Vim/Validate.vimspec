let s:V = vital#of('vital')
let s:Path = s:V.import('System.Filepath')
let s:ScriptLocal = s:V.import('Vim.ScriptLocal')

Describe Vim.Validate
  Before
    let Validate = gista#vital().import('Vim.Validate')
    let sf = s:ScriptLocal.sfuncs(s:Path.realpath(
          \ 'autoload/vital/__vim_gista__/Vim/Validate.vim'
          \))
    call Validate.set_config({
          \ 'prefix': 'vital: Vim.Validate: ',
          \})
  End

  Describe s:_translate({text}, {table})
    It substitutes keys of {table} in {text} into string value of {table}
      let text = 'foo %foo bar %bar'
      let table = {
            \ '%foo': 'Hello',
            \ '%bar': 'World',
            \}
      let ret = sf._translate(text, table)
      Assert Equals(ret, 'foo Hello bar World')
    End
    It substitutes keys of {table} in {text} into non string value of {table}
      let text = 'foo %foo bar %bar'
      let table = {
            \ '%foo': ['Hello'],
            \ '%bar': {'World': 'World'},
            \}
      let ret = sf._translate(text, table)
      Assert Equals(ret, 'foo [''Hello''] bar {''World'': ''World''}')
    End
  End

  Describe .throw({msg})
    It throw 'vital: Vim.Validate: ValidationError: {msg}'
      Throw /^vital: Vim.Validate: ValidationError: foo$/ Validate.throw('foo')
    End
    It throw 'foobar:ValidationError: {msg}' if config.prefix is 'foobar:'
      call Validate.set_config({'prefix': 'foobar:'})
      Throw /^foobar:ValidationError: foo$/ Validate.throw('foo')
    End
  End

  Describe .true({value}[, {msg}])
    It does nothing if {value} is true
      call Validate.true(1)
    End
    It throw ValidationError if {value} is false
      Throw /ValidationError/ Validate.true(0)
    End
    It throw ValidationError with {msg} if {value} is false
      Throw /ValidationError: 0$/
            \ Validate.true(0, '%value')
    End
  End
  Describe .false({value}[, {msg}])
    It does nothing if {value} is false
      call Validate.false(0)
    End
    It throw ValidationError if {value} is true
      Throw /ValidationError/ Validate.false(1)
    End
    It throw ValidationError with {msg} if {value} is true
      Throw /ValidationError: 1$/
            \ Validate.false(1, '%value')
    End
  End

  Describe .exists({value}, {list}[, {msg}])
    It does nothing if {value} is in {list}
      call Validate.exists('foo', ['foo', 'bar'])
    End
    It throw ValidationError if {value} is not in {list}
      let value = 'unknown'
      let list = ['foo', 'bar']
      Throw /ValidationError/ Validate.exists(value, list)
    End
    It throw ValidationError with {msg} if {value} is not in {list}
      let value = 'unknown'
      let list = ['foo', 'bar']
      Throw /ValidationError: unknown \['foo', 'bar'\]$/
            \ Validate.exists(value, list, '%value %list')
    End
  End
  Describe .not_exists({value}, {list}[, {msg}])
    It does nothing if {value} is NOT in {list}
      call Validate.not_exists('foo', ['bar'])
    End
    It throw ValidationError if {value} is in {list}
      let value = 'foo'
      let list = ['foo', 'bar']
      Throw /ValidationError/ Validate.not_exists(value, list)
    End
    It throw ValidationError with {msg} if {value} is not in {list}
      let value = 'foo'
      let list = ['foo', 'bar']
      Throw /ValidationError: foo \['foo', 'bar'\]$/
            \ Validate.not_exists(value, list, '%value %list')
    End
  End

  Describe .key_exists({value}, {dict}[, {msg}])
    It does nothing if {value} is in {dict}
      call Validate.key_exists('foo', {'foo': 'bar'})
    End
    It throw ValidationError if {value} is not in {dict}
      let value = 'unknown'
      let dict = {'foo': 'bar'}
      Throw /ValidationError/ Validate.key_exists(value, dict)
    End
    It throw ValidationError with {msg} if {value} is not in {dict}
      let value = 'unknown'
      let dict = {'foo': 'bar'}
      Throw /ValidationError: unknown {'foo': 'bar'}$/
            \ Validate.key_exists(value, dict, '%value %dict')
    End
  End
  Describe .key_not_exists({value}, {dict}[, {msg}])
    It does nothing if {value} is NOT in {dict}
      call Validate.key_not_exists('hoge', {'foo': 'bar'})
    End
    It throw ValidationError if {value} is in {dict}
      let value = 'foo'
      let dict = {'foo': 'bar'}
      Throw /ValidationError/ Validate.key_not_exists(value, dict)
    End
    It throw ValidationError with {msg} if {value} is in {dict}
      let value = 'foo'
      let dict = {'foo': 'bar'}
      Throw /ValidationError: foo {'foo': 'bar'}$/
            \ Validate.key_not_exists(value, dict, '%value %dict')
    End
  End

  Describe .empty({value}[, {msg}])
    It does nothing if {value} is an empty value
      call Validate.empty('')
      call Validate.empty([])
      call Validate.empty({})
      call Validate.empty(0)
    End
    It throw ValidationError if {value} is non empty value
      Throw /ValidationError/ Validate.empty('foo')
      Throw /ValidationError/ Validate.empty(['foo'])
      Throw /ValidationError/ Validate.empty({'foo': 'bar'})
      Throw /ValidationError/ Validate.empty(1)
    End
    It throw ValidationError with {msg} if {value} is non empty value
      Throw /ValidationError: foo/ Validate.empty('foo', '%value')
      Throw /ValidationError: \['foo'\]/ Validate.empty(['foo'], '%value')
      Throw /ValidationError: {'foo': 'bar'}/ Validate.empty({'foo': 'bar'}, '%value')
      Throw /ValidationError: 1/ Validate.empty(1, '%value')
    End
  End
  Describe .not_empty({value}[, {msg}])
    It does nothing if {value} is not an empty value
      call Validate.not_empty('foo')
      call Validate.not_empty(['foo'])
      call Validate.not_empty({'foo': 'bar'})
      call Validate.not_empty(1)
    End
    It throw ValidationError if {value} is an empty value
      Throw /ValidationError/ Validate.not_empty('')
      Throw /ValidationError/ Validate.not_empty([])
      Throw /ValidationError/ Validate.not_empty({})
      Throw /ValidationError/ Validate.not_empty(0)
    End
    It throw ValidationError with {msg} if {value} is an empty value
      Throw /ValidationError: HELLO/
            \ Validate.not_empty('', 'HELLO')
      Throw /ValidationError: HELLO/
            \ Validate.not_empty([], 'HELLO')
      Throw /ValidationError: HELLO/
            \ Validate.not_empty({}, 'HELLO')
      Throw /ValidationError: HELLO/
            \ Validate.not_empty(0, 'HELLO')
    End
  End

  Describe .pattern({value}, {pattern}[, {msg}])
    It does nothing if {value} follow {pattern}
      call Validate.pattern('foo', '^foo$')
    End
    It throw ValidationError if {value} does not follow {pattern}
      Throw /ValidationError/ Validate.pattern('bar', '^foo$')
    End
    It throw ValidationError with {msg} if {value} does not follow {pattern}
      Throw /ValidationError: bar \^foo\$/
            \ Validate.pattern('bar', '^foo$', '%value %pattern')
    End
  End
  Describe .not_pattern({value}, {pattern}[, {msg}])
    It does nothing if {value} does not follow {pattern}
      call Validate.not_pattern('bar', '^foo$')
    End
    It throw ValidationError if {value} follow {pattern}
      Throw /ValidationError/ Validate.not_pattern('foo', '^foo$')
    End
    It throw ValidationError with {msg} if {value} follow {pattern}
      Throw /ValidationError: foo \^foo\$/
            \ Validate.not_pattern('foo', '^foo$', '%value %pattern')
    End
  End

  Describe .call_silently({fn}[, {args}, {dict}, {default}])
    After all
      unlet g:ValidateSilentlyTestVariable
      delfunction ValidateSilentlyTestFunction
    End

    It return a result of {fn}
      function! ValidateSilentlyTestFunction(...) abort
        let g:ValidateSilentlyTestVariable = a:000
        return { 'Hello': 'Goodbye' }
      endfunction
      let ret = Validate.call_silently(
            \ 'ValidateSilentlyTestFunction', ['a']
            \)
      Assert Equals(g:ValidateSilentlyTestVariable, ['a'])
      Assert Equals(ret, { 'Hello': 'Goodbye' })
    End

    It suppress ValidationError in {fn} and return an empty string if it is a valid ValidationError
      function! ValidateSilentlyTestFunction(...) abort
        let g:ValidateSilentlyTestVariable = a:000
        throw 'vital: Vim.Validate: ValidationError: Test'
        " The following lines are not executed
        let g:ValidateSilentlyTestVariable = []
        return { 'Hello': 'Goodbye' }
      endfunction
      let ret = Validate.call_silently(
            \ 'ValidateSilentlyTestFunction', ['a']
            \)
      Assert Equals(g:ValidateSilentlyTestVariable, ['a'])
      Assert Equals(ret, '')
    End

    It suppress ValidationError in {fn} and return {default} if it is a valid ValidationError
      function! ValidateSilentlyTestFunction(...) abort
        let g:ValidateSilentlyTestVariable = a:000
        throw 'vital: Vim.Validate: ValidationError: Test'
        " The following lines are not executed
        let g:ValidateSilentlyTestVariable = []
        return { 'Hello': 'Goodbye' }
      endfunction
      let ret = Validate.call_silently(
            \ 'ValidateSilentlyTestFunction', ['a'], {}, {'Foo': 'Bar'},
            \)
      Assert Equals(g:ValidateSilentlyTestVariable, ['a'])
      Assert Equals(ret, {'Foo': 'Bar'})
    End

    It does not suppress exception in {fn} if it is not a valid ValidationError
      function! ValidateSilentlyTestFunction(...) abort
        let g:ValidateSilentlyTestVariable = a:000
        throw 'Foo: ValidationError: Test'
        " The following lines are not executed
        let g:ValidateSilentlyTestVariable = []
      endfunction
      Throw /^Foo: ValidationError: Test$/
            \ Validate.call_silently('ValidateSilentlyTestFunction', ['a'])
    End
  End
End
